/*
 * Copyright 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.example.platform.plugin.CreateSample
import com.example.platform.plugin.CreateRunConfig

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath libs.android.gradlePlugin
        classpath libs.hilt.plugin
        classpath libs.google.ksp
        classpath libs.kotlin.gradlePlugin
        classpath libs.affectedmoduledetector
    }
}

plugins {
    // v6.6.1 and above currently results in https://github.com/diffplug/spotless/issues/1213
    id "com.diffplug.spotless" version "6.6.0"
    id "com.github.ben-manes.versions" version "0.44.0"
    id "nl.littlerobots.version-catalog-update" version "0.7.0"
}

apply plugin: 'com.dropbox.affectedmoduledetector'

versionCatalogUpdate {
    sortByKey = true
    keep {
        keepUnusedVersions = true
    }
}

affectedModuleDetector {
    baseDir = "${project.rootDir}"
    pathsAffectingAllModules = [
            "gradle/libs.versions.toml",
    ]
    excludedModules = [
    ]

    logFilename = "output.log"
    logFolder = "${rootProject.buildDir}/affectedModuleDetector"

    String baseRef = findProperty("affected_base_ref")
    // If we have a base ref to diff against, extract the branch name and use it
    if (baseRef != null && !baseRef.isEmpty()) {
        // Remove the prefix from the head.
        // TODO: need to support other types of git refs
        specifiedBranch = baseRef.replace('refs/heads/', '')
        compareFrom = "SpecifiedBranchCommit"
    } else {
        // Otherwise we use the previous commit. This is mostly used for commits to main.
        compareFrom = "PreviousCommit"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target "**/*.kt"
            ktlint(libs.versions.ktlint.get())
            licenseHeaderFile rootProject.file('spotless/copyright.txt')
        }

        groovyGradle {
            target '**/*.gradle'
            greclipse().configFile(rootProject.file('spotless/greclipse.properties'))
            licenseHeaderFile rootProject.file('spotless/copyright.txt'),
                    '(buildscript|apply|import|plugins)'
        }
    }

    // Remove all test apps after running UI tests.
    // This is specially important in CI so that test emulators don't run out of space.
    tasks.whenTaskAdded { task ->
        if (task.name == 'connectedDebugAndroidTest') {
            task.finalizedBy 'uninstallDebugAndroidTest'
        }
    }

    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            // Make sure that we're using the Android version of Guava
            if (details.requested.group == 'com.google.guava'
                    && details.requested.module.name == 'guava'
                    && details.requested.version.contains('jre')) {
                details.useVersion details.requested.version.replace('jre', 'android')
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { compile ->
        kotlinOptions {
            // Treat all Kotlin warnings as errors
            allWarningsAsErrors = true
            // Set JVM target to 1.8
            jvmTarget = "1.8"
            // Allow use of @OptIn
            freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
            // Enable default methods in interfaces
            freeCompilerArgs += "-Xjvm-default=all"
        }
    }
}

tasks.register('createSample', CreateSample) {
    it.projectDir.set(project.projectDir)
}
tasks.register('createRunConfig', CreateRunConfig) {
    it.projectDir.set(project.projectDir)
}